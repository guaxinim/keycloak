= Keycloak

{nbsp} +

[[proof-of-concept]]
== Proof of Concept
  
  This Keycloak PoC have the goal the evaluation accordingly to the common needs in the enterprise about authentication and authorizationprova de conceito do Keycloak.
  O objetivo é garantir a integração dos mecanismos de autenticação hoje utilizados, promover uma gerência única dos acessos no modelo 'self-service' e customização dos cenários para promover o baixo acoplamento das aplicações-cliente e a diminuição da complexidade de integração.
  
{nbsp} +

*A prova de conceito do Keycloak envolveu os seguintes passos:*

  . Instalação do Keycloak Server
  . Configuração do Keycloak Server
  .. Definição de Federação de Dados com o Active Directory
  .. Definição de Federação de Dados com o AcessoJE
  .. Definição do Identity Provider OD
  . Integração das aplicações
  .. Integração de aplicações que usam o OD
  .. Integração de uma aplicação Mobile
  .. Integração de uma aplicação de Portal
  .. Integração de aplicações que usam o Acesso

{nbsp} +

[[papeis]]
=== Papéis necessários com a utilização do Keycloak

. *Mantenedor*
+
Perfil responsável por manter e administrar do ponto de vista de infraestrutura o servidor onde o Keycloak será hospedado e o serviço do Keycloak.
Não é exigido uma expertise maior do profissional de operações visto que o Keycloak é apenas um JBoss que possui módulos adicionais para fazer essa função.

. *Administrador*
+
Perfil de um técnico que conheça o funcionamento do keycloak para realizar tarefas administrativas como alteração de Realms, adição, remoção e alteração de clientes, de mecanismos de dados e Identity Providers e criação de usuários de alto nível para gerência de permissões de um domínio específico. Obs: Todas as tarefas executadas por esse usuário serão realizadas no Keycloak via interface de administração web.

. *Desenvolvedor*
+
Perfil responsável pela integração da(s) aplicação(ões) com o Keycloak. Ele obterá com o administrador os detalhes do serviço, fará o download da configuração via interface de administração do Keycloak, informará as roles que a aplicação utiliza para serem cadastradas no Keycloak e será responsável por deixar a aplicação funcionando e autenticando via Keycloak.

. *Gerente*
+
Perfil de usuário do Keycloak com acesso limitado à interface de administração, com permissão para criação e autorização de usuários para um domínio específico

. *Usuário*
+
Usuário do keycloak que entrará com um usuário e senha e terá acesso a um ou vários aplicativos dependendo do seu perfil.

{nbsp} +

=== Versão do keycloak utilizada

. Download do Keycloak Standalone Server Distribution (keycloak-2.1.0.Final.zip) via site oficial: http://www.keycloak.org/downloads.html.
+
NOTE: O Keycloak provê uma versão overlay para ser instalada em um JBoss EAP 6. Mas no site oficial a versão overlay não é recomendada em produção. Por esse motivo foi utilizada a versão em Wildfly.
+ 
WARNING: O Keycloak pode rodar em modo standalone ou em cluster, como o serviço de autenticação é crítico, a instalação de produção deverá ser configurada em um profile HA (modo domain ou standalone) com mais de um servidor para prover recursos de alta disponibilidade.
+
NOTE: Durante o desenvolvimento da POC, o produto que é baseado no keycloak, o 'Red Hat Single Sign On' foi lançado. Essa é a versão que será utilizada em produção por questões de suporte Red Hat.

[[instalacao]]
== Instalação do keycloak:

. Extraindo arquivos:
+
[source,bash]
----
$ unzip keycloak-2.0.0-Final.zip -d /opt
----
. Adequando para fins de compatibilidade de versões:
+
[source,bash]
----
$ cd /opt
$ ln -s keycloak-2.0.0.Final keycloak
----

. Preparando a base de dados do Keycloak:
+
NOTE: O Keycloak utiliza por padrão uma base relacional H2 para armazenar as informações de autenticação, é altamente recomendado a substituição da mesma por uma base de dados mais robusta.
+
WARNING: Esse guia não inclui instalação do Postgresql
+
[source,bash]
----
$ cd /opt/keycloak
$ mkdir -p modules/system/layers/keycloak/org/postgresql/main
$ cp ~/postgresql-9.4.1208.jar modules/system/layers/keycloak/org/postgresql/main/
$ vim modules/system/layers/keycloak/org/postgresql/main/module.xml
----
+
[[app-listing]]
[source,xml]
.module.xml
----
<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.3" name="org.postgresql">

    <resources>
        <resource-root path="postgresql-9.4.1208.jar"/>
    </resources>

    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
----
+
[source,bash]
----
$ ./bin/jboss-cli.sh
$ embed-host-controller --domain-config=domain.xml --std-out=echo
$ /profile=auth-server-clustered/subsystem=datasources/jdbc-driver=postgresql:add(driver-module-name=org.postgresql,driver-name=postgresql,driver-class-name=org.postgresql.Driver)
$ /profile=auth-server-clustered/subsystem=datasources/data-source=KeycloakDS:write-attribute(name=connection-url,value=jdbc:postgresql://localhost:5432/keycloak)
$ /profile=auth-server-clustered/subsystem=datasources/data-source=KeycloakDS:write-attribute(name=driver-name,value=postgresql)
$ /profile=auth-server-clustered/subsystem=datasources/data-source=KeycloakDS:write-attribute(name=user-name,value=postgres)
$ /profile=auth-server-clustered/subsystem=datasources/data-source=KeycloakDS:write-attribute(name=password,value=postgres)
$ quit
----
+
WARNING: O Keycloak se conecta a uma base de nome *keycloak*. É necessário a criação da mesma no banco de dados Postresql
. Preparando a configuração de persistência do Keycloak
+
[source,bash]
----
$ cd /opt/keycloak
$ vim keycloak-server.json
$ mkdir domain/servers/server-one/configuration
$ cp keycloak-server.json domain/servers/<server-one>/configuration
----
+
[[app-listing]]
[source,json]
.keycloak-server.json
----
{
    "providers": [
        "classpath:${jboss.home.dir}/providers/*"
    ],

    "admin": {
        "realm": "master"
    },

    "eventsStore": {
        "provider": "jpa",
        "jpa": {
            "exclude-events": [ "REFRESH_TOKEN" ]
        }
    },

    "realm": {
        "provider": "jpa"
    },

    "user": {
        "provider": "jpa"
    },

    "userCache": {
        "default" : {
            "enabled": true
        }
    },

    "userSessionPersister": {
        "provider": "jpa"
    },

    "authorizationPersister": {
        "provider": "jpa"
    },

    "timer": {
        "provider": "basic"
    },

    "theme": {
        "staticMaxAge": 2592000,
        "cacheTemplates": true,
        "cacheThemes": true,
        "folder": {
          "dir": "${jboss.home.dir}/themes"
        }
    },

    "scheduled": {
        "interval": 900
    },

    "connectionsHttpClient": {
        "default": {}
    },

    "connectionsJpa": {
        "default": {
            "dataSource": "java:jboss/datasources/KeycloakDS",
            "databaseSchema": "update"
        }
    },

    "realmCache": {
        "default" : {
            "enabled": true
        }
    },

    "connectionsInfinispan": {
        "provider": "default",
        "default": {
            "cacheContainer" : "java:comp/env/infinispan/Keycloak"
        }
    },

    "connectionsMongo": {
        "default": {
            "host": "127.0.0.1",
            "port": "27017",
            "db": "keycloak",
            "connectionsPerHost": 100,
            "databaseSchema": "update"
        }
    }
}
----
+
O arquivo *keycloak-server.json* deverá ser adicionado à pasta "configuration" de cada server a ser criado.
+
CAUTION: Nos testes foi identificado um problema utilizando o MongoDB como base de User/Role. *Devido a isso alterei o keycloak-server.json para fazer essa configuração via JPA ao invés de usar MongoDB*. Detalhes: https://issues.jboss.org/browse/KEYCLOAK-3345 
+
Portanto o arquivo anterior (keycloak-server.json) está diferente da documentação oficial pois alterei de  *"mongo"*, para *"jpa"*


=== Habilitando SSL no Keycloak Server
NOTE: É altamente recomendado o uso de SSL no keycloak server ou em um proxy reverso na frente dele. O SSL pode ser definido em três níveis: *external requests*, *none*, *all requests*.

. Criando um keystore auto-assinado:
+
[source,bash]
----
$ keytool -genkey -alias localhost -keyalg RSA -keystore keycloak.jks -validity 10950
----
+
Informações do certificado (para fins de teste):
+
[qanda]
What is your first and last name?::
  [Unknown]:  localhost
What is the name of your organizational unit?::
  [Unknown]:  keycloak
What is the name of your organization?::
  [Unknown]:  TSE
What is the name of your City or Locality?::
  [Unknown]:  Brasilia
What is the name of your State or Province?::
  [Unknown]:  DF
What is the two-letter country code for this unit?::
  [Unknown]:  BR

. Configurando o keycloak para usar o certificado gerado:
+
[source,bash]
----
$ cp keycloak.jks domain/configuration
$ ./bin/jboss-cli.sh
$ embed-host-controller --domain-config=domain.xml --std-out=echo
$ /profile=auth-server-clustered/subsystem=undertow/server=default-server/https-listener=https:add(socket-binding=https,security-realm=UndertowRealm)
$ quit
----
+
[source,bash]
----
$ ./bin/jboss-cli.sh
$ embed-host-controller --host-config=host.xml --std-out=echo
$ /host=master/core-service=management/security-realm=UndertowRealm:add(map-groups-to-roles=false)
$ /host=master/core-service=management/security-realm=UndertowRealm/server-identity=ssl:add(keystore-path=keycloak.jks,keystore-relative-to=jboss.domain.config.dir,keystore-password=keycloak123)
$ quit
----
+
NOTE: Para conexões de saída SSL um Trustore deve ser definido. Para esse Keycloak Server não iremos definir configuração SSL de saída.

=== Aplicando configurações de administração

. Adição de usuário de administração do JBoss do Keycloak
+
[source,bash]
----
$ ./bin/add-user.sh
----
+
[qanda]
What type of user do you wish to add?::
 a) Management User (mgmt-users.properties) +
 b) Application User (application-users.properties) +
(a): *a*

Enter the details of the new user to add.::
Using realm 'ManagementRealm' as discovered from the existing property files. +
Username : :: *admin* +
The username 'admin' is easy to guess +
Are you sure you want to add user 'admin' yes/no?:: *yes* +
Password recommendations are listed below. To modify these restrictions edit the add-user.properties configuration file. +
  The password should be different from the username +
  The password should not be one of the following restricted values {root, admin, administrator} +
  The password should contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), 1 non-alphanumeric symbol(s) 
  +
Password : :: *keycloak@123* +
Re-enter Password : :: *keycloak@123* +
What groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]::
About to add user 'admin' for realm 'ManagementRealm' +
Is this correct yes/no?:: *yes* +
Added user 'admin' to file '/opt/pocs/keycloak-2.0.0.Final/standalone/configuration/mgmt-users.properties' +
Added user 'admin' to file '/opt/pocs/keycloak-2.0.0.Final/domain/configuration/mgmt-users.properties' +
Added user 'admin' with groups  to file '/opt/pocs/keycloak-2.0.0.Final/standalone/configuration/mgmt-groups.properties' +
Added user 'admin' with groups  to file '/opt/pocs/keycloak-2.0.0.Final/domain/configuration/mgmt-groups.properties' +
Is this new user going to be used for one AS process to connect to another AS process?
e.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.
yes/no?:: *no*

. Adição de usuário admin do Keycloak
+
[source,bash]
----
$ ./bin/add-user-keycloak.sh -r master -u admin
$ ./bin/add-user-keycloak.sh --sc domain/servers/server-one/configuration -r master -u admin
----
+
[qanda]
Password : :: *keycloak@123* +
Added 'admin' to 'domain/servers/server-one/configuration/keycloak-add-user.json', restart server to load user

. Via interface gráfica
+
.. Definição do REALM: TSE
+
image::http://imagens/keycloak1.PNG[]
.. Aplicar configurações de internacionalização
+
image::http://imagens/keycloak2.PNG[]
.. No menu User Federation, adicionar um provider do tipo LDAP:
+
image::http://imagens/keycloak3.PNG[]
*Connection URL:* ldap://ldap.url.com:389 +
*Users DN:* OU=company,DC=com +
*Usuário de Bind DN:* cn=user,ou=company,dc=company,dc=com +
*Custom User LDAP Filter:* (&(objectCategory=Person)(sAMAccountName= * )) +
*Search Scope:* Subtree +
.. Data Mappers no LDAP:
+
image::http://imagens/keycloak4.PNG[]
+

[[clientes]]
== Clientes Keycloak

=== Clientes em Java (JBoss Adapter)

O Keycloak possui adapters para clientes de várias tecnologias. Os Adapters provêm recursos para facilitar a configuração e utilização do keycloak por aplicações clientes.

. Configurando o JBoss EAP 6.4.8 como Adapter Keycloak:

.. Download do Adapter para JBoss EAP 6.4: *keycloak-saml-eap6-adapter-dist-2.0.0.Final.zip*

.. Extração do adapter no JBoss EAP 6.4:
+
[source,bash]
----
$ cd $JBOSS_HOME
$ unzip keycloak-saml-eap6-adapter-dist-2.0.0.Final.zip
----
.. Instalação do adapter no modo standalone:
+
[source,bash]
----
$ ./bin/standalone.sh &
$ ./bin/jboss-cli.sh --connect
$ /extension=org.keycloak.keycloak-saml-adapter-subsystem/:add(module=org.keycloak.keycloak-saml-adapter-subsystem)
$ /subsystem=keycloak-saml:add
$ quit
$ kill $!
----
+
.. Instalação do adapter no modo domain:
+
[source,bash]
----
$ ./bin/domain.sh &
$ ./bin/jboss-cli.sh --connect
$ /extension=org.keycloak.keycloak-saml-adapter-subsystem/:add(module=org.keycloak.keycloak-saml-adapter-subsystem)
$ /profile=default/subsystem=keycloak-saml:add
$ /profile=full/subsystem=keycloak-saml:add
$ /profile=ha/subsystem=keycloak-saml:add
$ /profile=full-ha/subsystem=keycloak-saml:add
$ quit
$ kill $!
----
.. Criando um usuário de administração JBoss
+
[source,bash]
----
$ ./jboss-eap-6.4/bin/add-user.sh
----
+ 
Definir o usuário: admin  senha: redhat@123

{nbsp} +
{nbsp} +

=== Configuração dos clientes OD

{nbsp} +
{nbsp} +

=== Configuração do cliente Plone

{nbsp} +

